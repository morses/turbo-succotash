name: Build and run unit tests on Fuji project

# run upon a push to the integration branch 
on:
  push:
    branches: integration

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DOTNET_VERSION: '6.0.x'           # set this to the dot net version to use
  PROJECT_PATH: './Fuji_Example'
  PROJECT_NAME: 'Fuji_Tests'
  JS_PROJECT_NAME: 'Fuji_JSTests'
  TEST_FILENAME: 'NUnitTestResults.md'
  RANDOM_VARIABLE: 'adslkfjaslkfj'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains one job.  You can easily have multiple jobs but they run in separate virtual
  # machines and don't share an environment, so it's harder to split up things into say, build and test jobs
  build_and_test:
    name: Build all .NET projects then run tests
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # environments are where we store secrets, all secrets in this environment can be accessed by this action
    environment: production

    # Steps represent a sequence of tasks that will be executed as part of the job
    # They are executed in order
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} 

      # Runs a single command using the runners shell (just as an example that we can do anything the shell can do)
      - name: Run a one-line script
        run: echo Hello, world!

      # confirm we can access secrets within an environment
      - name: echo a secret
        env:
          SUPER_SECRET: ${{ secrets.A_SECRET }}
        run: echo "$SUPER_SECRET"
        
      # Build the selected project
      - name: Build project
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          dotnet restore
          dotnet build

      # Test the selected project
      - name: Run unit tests on the main project
        working-directory: ${{ env.PROJECT_PATH }}
        run: dotnet test --no-restore --no-build ${{ env.PROJECT_NAME }} --logger:"liquid.md;LogFileName=${{github.workspace}}/${{env.TEST_FILENAME}};"
      
      # upload test report as build artifact (unfortunately it doesn't display it nicely)
      - name: Upload test report as build artifact
        uses: actions/upload-artifact@v3
        # Use always() to always run this step to publish test results even when there are test failures
        if: ${{always()}}
        with:
          name: 'NUnit test run'
          path: ${{github.workspace}}/${{env.TEST_FILENAME}}
      
      
      